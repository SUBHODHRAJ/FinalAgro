import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useLocation, useNavigate, Link } from 'react-router-dom';
import { 
  ArrowLeft, 
  Share2, 
  Download, 
  Camera, 
  AlertCircle,
  CheckCircle,
  Eye,
  Leaf,
  Sparkles,
  Check
} from 'lucide-react';
import { useLanguage } from '../contexts/LanguageContext';
import { DetectionResult } from '../types';

const ResultPage: React.FC = () => {
  const { t } = useLanguage();
  const location = useLocation();
  const navigate = useNavigate();
  const [animatedConfidence, setAnimatedConfidence] = useState(0);
  const [showScanEffect, setShowScanEffect] = useState(true);
  
  const result = location.state?.result as DetectionResult;

  // Mock data for demonstration
  const mockResult = {
    disease: 'Late Blight',
    confidence: 92,
    severity: 'Severe',
    reference: {
      healthy: 'https://images.unsplash.com/photo-1464522883041-5a5890f09092?auto=format&fit=crop&w=400&q=80',
      earlyStage: 'https://images.unsplash.com/photo-1530836369250-ef72a3f5cda8?auto=format&fit=crop&w=400&q=80',
      moderate: 'https://images.unsplash.com/photo-1544427920-c49ccfb85579?auto=format&fit=crop&w=400&q=80',
      severe: 'https://images.unsplash.com/photo-1574263867128-76bf4c36b9a1?auto=format&fit=crop&w=400&q=80',
    },
  };

  if (!result) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-xl text-green-600 mb-4">{t('result.error.noResults')}</p>
          <Link
            to="/upload"
            className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors"
          >
            {t('result.error.uploadNew')}
          </Link>
        </div>
      </div>
    );
  }

  const isHealthy = result.disease === 'Healthy Crop';
  const confidenceColor = result.confidence >= 80 ? 'text-green-600' : result.confidence >= 60 ? 'text-yellow-600' : 'text-red-600';
  
  // Determine severity based on confidence and disease type
  const getSeverity = () => {
    if (isHealthy) return 'Healthy';
    if (result.confidence >= 85) return 'Severe';
    if (result.confidence >= 65) return 'Moderate';
    return 'Mild';
  };

  const severity = getSeverity();

  // Animated confidence counter
  useEffect(() => {
    if (result) {
      const timer = setTimeout(() => {
        const interval = setInterval(() => {
          setAnimatedConfidence(prev => {
            if (prev >= result.confidence) {
              clearInterval(interval);
              return result.confidence;
            }
            return prev + 1;
          });
        }, 20);
        return () => clearInterval(interval);
      }, 500);
      return () => clearTimeout(timer);
    }
  }, [result]);

  // Hide scan effect after animation
  useEffect(() => {
    const timer = setTimeout(() => setShowScanEffect(false), 3000);
    return () => clearTimeout(timer);
  }, []);

  const getSeverityBadgeColor = (severity: string) => {
    switch (severity) {
      case 'Severe': return 'bg-red-100 text-red-800 border-red-200';
      case 'Moderate': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'Mild': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'Healthy': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const handleShare = () => {
    const shareText = `AgroIndia Detection Result:\n\nCrop: ${result.crop}\nIssue: ${result.disease}\nConfidence: ${result.confidence}%\nSeverity: ${severity}\n\nRecommendation: ${result.remedy}`;
    
    if (navigator.share) {
      navigator.share({
        title: 'AgroIndia Detection Result',
        text: shareText,
      });
    } else {
      const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(shareText)}`;
      window.open(whatsappUrl, '_blank');
    }
  };

  const handleDownload = () => {
    const reportContent = `
AgroIndia Detection Report
Generated: ${new Date(result.timestamp).toLocaleDateString()}

Crop: ${result.crop}
Detected Issue: ${result.disease}
Confidence Level: ${result.confidence}%
Severity: ${severity}

Treatment Recommendation:
${result.remedy}

Preventive Measures:
${result.preventiveMeasures.map((measure, index) => `${index + 1}. ${measure}`).join('\n')}

---
Report generated by AgroIndia AI
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `agroindia-report-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleConfirmCrop = () => {
    navigate('/monitoring', { state: { result } });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 py-8 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
      {/* Floating Particles */}
      {[...Array(6)].map((_, i) => (
        <motion.div
          key={i}
          className="absolute opacity-20"
          initial={{
            x: Math.random() * window.innerWidth,
            y: window.innerHeight + 50,
            rotate: 0,
            scale: 0.5 + Math.random() * 0.5
          }}
          animate={{
            y: -100,
            rotate: 360,
            x: Math.random() * window.innerWidth
          }}
          transition={{
            duration: 8 + Math.random() * 4,
            repeat: Infinity,
            delay: i * 0.5,
            ease: "linear"
          }}
        >
          {i % 3 === 0 ? (
            <Leaf className="w-8 h-8 text-green-400" />
          ) : i % 3 === 1 ? (
            <Sparkles className="w-6 h-6 text-yellow-400" />
          ) : (
            <div className="w-4 h-4 bg-green-400 rounded-full" />
          )}
        </motion.div>
      ))}

      <div className="max-w-7xl mx-auto relative z-10">
        {/* Header */}
        <motion.div 
          className="flex items-center justify-between mb-8"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <button
            onClick={() => navigate('/upload')}
            className="flex items-center space-x-2 text-green-600 hover:text-green-700 font-medium"
          >
            <ArrowLeft className="w-5 h-5" />
            <span>{t('result.backToUpload')}</span>
          </button>
          
          <h1 className="text-3xl md:text-4xl font-bold text-green-800">
            Detection Results
          </h1>
          
          <div className="w-20"></div>
        </motion.div>

        {/* Step 3: Detection Results Section - Redesigned */}
        <motion.div 
          className="bg-white rounded-2xl shadow-xl overflow-hidden mb-8"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          {/* Disease Title with Confidence and Severity Badge */}
          <div className="bg-gradient-to-r from-green-600 to-emerald-600 text-white p-6">
            <div className="flex flex-col md:flex-row md:items-center justify-between space-y-4 md:space-y-0">
              <div className="flex-1">
                <motion.h2
                  className="text-2xl md:text-3xl font-bold mb-2"
                  initial={{ scale: 0.8, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ duration: 0.8, type: "spring", bounce: 0.4 }}
                >
                  {result.disease} â€“ {animatedConfidence}%
                </motion.h2>
                
                {/* Slim Confidence Progress Bar */}
                <div className="w-full bg-white/20 rounded-full h-2 mb-3">
                  <motion.div
                    className="h-2 rounded-full bg-white"
                    initial={{ width: "0%" }}
                    animate={{ width: `${result.confidence}%` }}
                    transition={{ duration: 2, delay: 0.5, ease: "easeOut" }}
                  ></motion.div>
                </div>
                
                <div className="flex items-center space-x-2 text-sm text-green-100">
                  <span>Analyzed on {new Date(result.timestamp).toLocaleDateString()}</span>
                </div>
              </div>
              
              <motion.div 
                className="flex-shrink-0"
                animate={severity === 'Severe' ? {
                  scale: [1, 1.05, 1],
                  boxShadow: ["0 0 0 0 rgba(255, 255, 255, 0.7)", "0 0 0 10px rgba(255, 255, 255, 0)", "0 0 0 0 rgba(255, 255, 255, 0)"]
                } : {}}
                transition={{ duration: 2, repeat: Infinity }}
              >
                <span className={`inline-block px-4 py-2 rounded-full text-sm font-semibold border-2 ${getSeverityBadgeColor(severity)}`}>
                  {severity} {severity !== 'Healthy' && 'Severity'}
                </span>
              </motion.div>
            </div>
          </div>

          {/* Split-screen layout: Left block + Right block */}
          <div className="grid lg:grid-cols-2 gap-8 p-8">
            {/* Left Block: Uploaded Image Card */}
            <motion.div 
              className="space-y-4"
              initial={{ opacity: 0, x: -30 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
            >
              <h3 className="text-xl font-semibold text-green-800 flex items-center space-x-2">
                <Camera className="w-5 h-5" />
                <span>Your Uploaded Image</span>
              </h3>
              
              <div className="bg-gray-50 rounded-xl p-4 hover:shadow-lg transition-shadow duration-300">
                {result.imageUrl && (
                  <div className="relative">
                    <img
                      src={result.imageUrl}
                      alt="Analyzed crop"
                      className="w-full h-64 object-cover rounded-lg shadow-md"
                    />
                    <AnimatePresence>
                      {showScanEffect && (
                        <motion.div
                          className="absolute inset-0 bg-gradient-to-r from-transparent via-green-400/30 to-transparent rounded-lg"
                          initial={{ x: "-100%" }}
                          animate={{ x: "100%" }}
                          exit={{ opacity: 0 }}
                          transition={{
                            duration: 2,
                            repeat: 1,
                            ease: "linear"
                          }}
                        />
                      )}
                    </AnimatePresence>
                    <motion.div
                      className="absolute top-3 right-3 bg-green-600 text-white px-3 py-1 rounded-full text-sm font-bold shadow-lg"
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      transition={{ delay: 2.5, type: "spring", bounce: 0.6 }}
                    >
                      âœ“ Analyzed
                    </motion.div>
                  </div>
                )}
                
                <div className="mt-4 space-y-2">
                  <div className="flex items-center justify-between p-3 bg-white rounded-lg shadow-sm">
                    <span className="text-sm font-medium text-gray-600">Crop Type:</span>
                    <span className="text-sm font-bold text-green-700">{result.crop.charAt(0).toUpperCase() + result.crop.slice(1)}</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-white rounded-lg shadow-sm">
                    <span className="text-sm font-medium text-gray-600">Analysis Date:</span>
                    <span className="text-sm font-bold text-green-700">{new Date(result.timestamp).toLocaleDateString()}</span>
                  </div>
                </div>
              </div>
            </motion.div>

            {/* Right Block: Reference Photos */}
            <motion.div 
              className="space-y-4"
              initial={{ opacity: 0, x: 30 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6, delay: 0.4 }}
            >
              <h3 className="text-xl font-semibold text-green-800 flex items-center space-x-2">
                <Eye className="w-5 h-5" />
                <span>Reference Photos</span>
              </h3>
              
              <div className="bg-gray-50 rounded-xl p-4 hover:shadow-lg transition-shadow duration-300">
                {/* 2x2 Grid of Reference Images */}
                <motion.div
                  className="grid grid-cols-2 gap-3 mb-4"
                  variants={{
                    hidden: { opacity: 0 },
                    show: {
                      opacity: 1,
                      transition: {
                        staggerChildren: 0.1
                      }
                    }
                  }}
                  initial="hidden"
                  animate="show"
                >
                  {[
                    { src: mockResult.reference.healthy, alt: "Healthy Crop", color: "green", icon: CheckCircle, label: "Healthy" },
                    { src: mockResult.reference.earlyStage, alt: "Early Stage Disease", color: "yellow", icon: AlertCircle, label: "Early Stage" },
                    { src: mockResult.reference.moderate, alt: "Moderate Disease", color: "orange", icon: AlertCircle, label: "Moderate" },
                    { src: mockResult.reference.severe, alt: "Severe Disease", color: "red", icon: AlertCircle, label: "Severe" }
                  ].map((item, index) => (
                    <motion.div
                      key={index}
                      className="flex flex-col items-center group cursor-pointer"
                      variants={{
                        hidden: { opacity: 0, y: 20, scale: 0.9 },
                        show: { opacity: 1, y: 0, scale: 1 }
                      }}
                      whileHover={{ scale: 1.05, y: -3 }}
                      transition={{ type: "spring", stiffness: 300 }}
                    >
                      <motion.img
                        src={item.src}
                        alt={item.alt}
                        className={`w-full h-20 object-cover rounded-lg shadow border-2 border-${item.color}-200 mb-2 group-hover:shadow-lg transition-shadow`}
                        whileHover={{ rotate: [0, -1, 1, 0] }}
                        transition={{ duration: 0.5 }}
                      />
                      <div className="flex items-center space-x-1">
                        <item.icon className={`w-3 h-3 text-${item.color}-600`} />
                        <span className={`text-${item.color}-700 text-xs font-semibold`}>{item.label}</span>
                      </div>
                    </motion.div>
                  ))}
                </motion.div>

                {/* Disease Progression Guide */}
                <motion.div 
                  className="bg-blue-50 p-4 rounded-lg border border-blue-200 cursor-pointer hover:bg-blue-100 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <div className="flex items-center space-x-2 mb-2">
                    <Eye className="w-5 h-5 text-blue-600" />
                    <span className="font-semibold text-blue-800">Disease Progression Guide</span>
                  </div>
                  <p className="text-blue-700 text-sm">
                    Click to view detailed progression stages and identification tips for {result.disease}
                  </p>
                </motion.div>
              </div>
            </motion.div>
          </div>
        </motion.div>

        {/* Confirm Crop Button */}
        <motion.div 
          className="mb-8 text-center"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.6 }}
        >
          <motion.button
            onClick={handleConfirmCrop}
            className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-bold py-4 px-8 rounded-xl shadow-lg transition-all transform"
            whileHover={{ 
              scale: 1.05, 
              boxShadow: "0 20px 40px rgba(34, 197, 94, 0.3)",
              y: -3
            }}
            whileTap={{ scale: 0.95 }}
          >
            <div className="flex items-center space-x-3">
              <Check className="w-6 h-6" />
              <span className="text-xl">Confirm the Crop</span>
            </div>
          </motion.button>
          <motion.p 
            className="mt-3 text-gray-600"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.8 }}
          >
            Proceed to monitoring dashboard for detailed tracking and treatment recommendations
          </motion.p>
        </motion.div>

        {/* Action Buttons */}
        <motion.div
          className="flex justify-center mb-8"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.8 }}
        >
          <motion.div
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Link
              to="/upload"
              className="flex items-center justify-center space-x-2 bg-green-100 hover:bg-green-200 text-green-700 font-semibold py-3 px-8 rounded-lg transition-all border border-green-300 group"
            >
              <Camera className="w-5 h-5 group-hover:rotate-12 transition-transform" />
              <span>Scan Another Crop</span>
            </Link>
          </motion.div>
        </motion.div>

      </div>
    </div>
  );
};

export default ResultPage;
