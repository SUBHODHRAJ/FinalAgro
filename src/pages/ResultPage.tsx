import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useLocation, useNavigate, Link } from 'react-router-dom';
import { 
  ArrowLeft, 
  Share2, 
  Download, 
  Camera, 
  AlertCircle,
  CheckCircle,
  Lightbulb,
  Shield,
  MessageCircle,
  Leaf,
  Bug,
  Beaker,
  Sparkles
} from 'lucide-react';
import { useLanguage } from '../contexts/LanguageContext';
import { DetectionResult } from '../types';
import ChatAssistant from '../components/ChatAssistant';

const ResultPage: React.FC = () => {
  const { t } = useLanguage();
  const location = useLocation();
  const navigate = useNavigate();
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [activeTab, setActiveTab] = useState<'organic' | 'chemical'>('organic');
  
  const result = location.state?.result as DetectionResult;

  if (!result) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-xl text-green-600 mb-4">No results found</p>
          <Link
            to="/upload"
            className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors"
          >
            Upload New Image
          </Link>
        </div>
      </div>
    );
  }

  const isHealthy = result.disease === 'Healthy Crop';
  const confidenceColor = result.confidence >= 80 ? 'text-green-600' : result.confidence >= 60 ? 'text-yellow-600' : 'text-red-600';

  const handleShare = () => {
    const shareText = `AgroIndia Detection Result:\n\nCrop: ${result.crop}\nIssue: ${result.disease}\nConfidence: ${result.confidence}%\n\nRecommendation: ${result.remedy}`;
    
    if (navigator.share) {
      navigator.share({
        title: 'AgroIndia Detection Result',
        text: shareText,
      });
    } else {
      const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(shareText)}`;
      window.open(whatsappUrl, '_blank');
    }
  };

  const handleDownload = () => {
    const reportContent = `
AgroIndia Detection Report
Generated: ${new Date(result.timestamp).toLocaleDateString()}

Crop: ${result.crop}
Detected Issue: ${result.disease}
Confidence Level: ${result.confidence}%

Treatment Recommendation:
${result.remedy}

Preventive Measures:
${result.preventiveMeasures.map((measure, index) => `${index + 1}. ${measure}`).join('\n')}

---
Report generated by AgroIndia AI
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `agroindia-report-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const organicSolutions = [
    "Apply neem oil spray (2-3 times per week)",
    "Use beneficial insects like ladybugs for natural pest control",
    "Prepare compost tea and apply to soil",
    "Implement crop rotation with nitrogen-fixing plants",
    "Use copper-based organic fungicides"
  ];

  const chemicalSolutions = [
    "Apply systemic fungicide (follow label instructions)",
    "Use targeted insecticide spray",
    "Apply balanced NPK fertilizer",
    "Use soil sterilization agents if needed",
    "Consider growth regulators for severe cases"
  ];

  const preventionTips = [
    "Maintain proper spacing between plants for air circulation",
    "Water at soil level to avoid wetting leaves",
    "Remove and destroy infected plant debris immediately",
    "Monitor crops regularly for early detection",
    "Use disease-resistant varieties when possible",
    "Ensure proper soil drainage and pH levels"
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <motion.div 
          className="flex items-center justify-between mb-8"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <button
            onClick={() => navigate('/upload')}
            className="flex items-center space-x-2 text-green-600 hover:text-green-700 font-medium"
          >
            <ArrowLeft className="w-5 h-5" />
            <span>Back to Upload</span>
          </button>
          
          <h1 className="text-2xl md:text-3xl font-bold text-green-800">
            Detection Results
          </h1>
          
          <div className="w-20"></div>
        </motion.div>

        {/* Split-screen layout */}
        <div className="grid lg:grid-cols-2 gap-8 mb-8">
          {/* Left: Uploaded Image */}
          <motion.div 
            className="bg-white rounded-2xl shadow-xl p-6"
            initial={{ opacity: 0, x: -30 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6 }}
          >
            <h2 className="text-xl font-semibold text-green-800 mb-4">Analyzed Image</h2>
            {result.imageUrl && (
              <img
                src={result.imageUrl}
                alt="Analyzed crop"
                className="w-full h-80 object-cover rounded-lg shadow-md"
              />
            )}
          </motion.div>

          {/* Right: Diagnosis + Confidence */}
          <motion.div 
            className="bg-white rounded-2xl shadow-xl p-6"
            initial={{ opacity: 0, x: 30 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
          >
            <h2 className="text-xl font-semibold text-green-800 mb-6">Diagnosis</h2>
            
            {/* Status Indicator */}
            <div className={`flex items-center space-x-3 p-4 rounded-lg mb-6 ${
              isHealthy ? 'bg-green-50 border border-green-200' : 'bg-orange-50 border border-orange-200'
            }`}>
              {isHealthy ? (
                <CheckCircle className="w-8 h-8 text-green-600" />
              ) : (
                <AlertCircle className="w-8 h-8 text-orange-600" />
              )}
              <div>
                <p className="font-semibold text-lg">
                  {isHealthy ? 'Healthy Crop Detected!' : 'Issue Detected'}
                </p>
                <p className="text-sm text-gray-600">
                  Analysis completed on {new Date(result.timestamp).toLocaleDateString()}
                </p>
              </div>
            </div>

            {/* Detection Details */}
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-600 mb-1">Crop Type</p>
                  <p className="font-semibold text-green-800 capitalize">{result.crop}</p>
                </div>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-600 mb-1">Confidence</p>
                  <p className={`font-semibold text-2xl ${confidenceColor}`}>{result.confidence}%</p>
                </div>
              </div>

              <div className="bg-gray-50 p-4 rounded-lg">
                <p className="text-sm text-gray-600 mb-2">Detected Issue</p>
                <p className="font-semibold text-xl text-green-800">{result.disease}</p>
              </div>
            </div>
          </motion.div>
        </div>

        {/* Healthy vs Infected Comparison Cards */}
        <motion.div 
          className="grid md:grid-cols-2 gap-6 mb-8"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
        >
          {/* Healthy Leaf Card */}
          <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-2xl shadow-lg p-6 border border-green-200">
            <div className="flex items-center space-x-3 mb-4">
              <div className="bg-green-100 p-3 rounded-full">
                <Leaf className="w-6 h-6 text-green-600" />
              </div>
              <h3 className="text-xl font-bold text-green-800">Healthy Leaf</h3>
            </div>
            <ul className="space-y-2 text-green-700">
              <li>• Uniform green coloration</li>
              <li>• No spots or discoloration</li>
              <li>• Proper leaf structure</li>
              <li>• Strong, vibrant appearance</li>
            </ul>
          </div>

          {/* Infected Leaf Card */}
          <div className="bg-gradient-to-br from-orange-50 to-red-50 rounded-2xl shadow-lg p-6 border border-orange-200">
            <div className="flex items-center space-x-3 mb-4">
              <div className="bg-orange-100 p-3 rounded-full">
                <Bug className="w-6 h-6 text-orange-600" />
              </div>
              <h3 className="text-xl font-bold text-orange-800">Signs of Disease</h3>
            </div>
            <ul className="space-y-2 text-orange-700">
              <li>• Unusual spots or patches</li>
              <li>• Yellowing or browning</li>
              <li>• Wilting or deformation</li>
              <li>• Visible pests or damage</li>
            </ul>
          </div>
        </motion.div>

        {/* Tabbed Solutions Section */}
        <motion.div 
          className="bg-white rounded-2xl shadow-xl p-6 mb-8"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.6 }}
        >
          <h2 className="text-2xl font-bold text-green-800 mb-6">Treatment Solutions</h2>
          
          {/* Tab Navigation */}
          <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg mb-6">
            <button
              onClick={() => setActiveTab('organic')}
              className={`flex-1 flex items-center justify-center space-x-2 py-3 px-4 rounded-md font-semibold transition-all ${
                activeTab === 'organic'
                  ? 'bg-green-600 text-white shadow-md'
                  : 'text-green-600 hover:bg-green-50'
              }`}
            >
              <Leaf className="w-5 h-5" />
              <span>Organic Solutions</span>
            </button>
            <button
              onClick={() => setActiveTab('chemical')}
              className={`flex-1 flex items-center justify-center space-x-2 py-3 px-4 rounded-md font-semibold transition-all ${
                activeTab === 'chemical'
                  ? 'bg-blue-600 text-white shadow-md'
                  : 'text-blue-600 hover:bg-blue-50'
              }`}
            >
              <Beaker className="w-5 h-5" />
              <span>Chemical Solutions</span>
            </button>
          </div>

          {/* Tab Content */}
          <div className="min-h-[200px]">
            {activeTab === 'organic' ? (
              <div className="space-y-4">
                <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                  <h4 className="font-semibold text-green-800 mb-2">Recommended Organic Treatments:</h4>
                  <ul className="space-y-2">
                    {organicSolutions.map((solution, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <span className="bg-green-200 text-green-800 text-sm font-bold px-2 py-1 rounded-full mt-0.5 min-w-[24px] text-center">
                          {index + 1}
                        </span>
                        <span className="text-green-700">{solution}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                  <h4 className="font-semibold text-blue-800 mb-2">Chemical Treatment Options:</h4>
                  <ul className="space-y-2">
                    {chemicalSolutions.map((solution, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <span className="bg-blue-200 text-blue-800 text-sm font-bold px-2 py-1 rounded-full mt-0.5 min-w-[24px] text-center">
                          {index + 1}
                        </span>
                        <span className="text-blue-700">{solution}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                <div className="bg-yellow-50 p-3 rounded-lg border border-yellow-200">
                  <p className="text-yellow-800 text-sm">⚠️ Always follow manufacturer instructions and safety guidelines when using chemical treatments.</p>
                </div>
              </div>
            )}
          </div>
        </motion.div>

        {/* Future Prevention Tips */}
        <motion.div 
          className="bg-white rounded-2xl shadow-xl p-6 mb-8"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.8 }}
        >
          <div className="flex items-center space-x-3 mb-6">
            <div className="bg-purple-100 p-3 rounded-full">
              <Sparkles className="w-6 h-6 text-purple-600" />
            </div>
            <h2 className="text-2xl font-bold text-green-800">Future Prevention Tips</h2>
          </div>
          
          <div className="grid md:grid-cols-2 gap-4">
            {preventionTips.map((tip, index) => (
              <div key={index} className="flex items-start space-x-3 p-3 bg-purple-50 rounded-lg border border-purple-200">
                <span className="bg-purple-200 text-purple-800 text-sm font-bold px-2 py-1 rounded-full min-w-[24px] text-center">
                  {index + 1}
                </span>
                <span className="text-purple-700">{tip}</span>
              </div>
            ))}
          </div>
        </motion.div>

        {/* Action Buttons */}
        <motion.div 
          className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 1 }}
        >
          <button
            onClick={handleShare}
            className="flex items-center justify-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-all transform hover:scale-105"
          >
            <Share2 className="w-5 h-5" />
            <span>Share Results</span>
          </button>
          
          <button
            onClick={handleDownload}
            className="flex items-center justify-center space-x-2 bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-all transform hover:scale-105"
          >
            <Download className="w-5 h-5" />
            <span>Download Report</span>
          </button>
          
          <button
            onClick={() => setIsChatOpen(true)}
            className="flex items-center justify-center space-x-2 bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 px-6 rounded-lg transition-all transform hover:scale-105"
          >
            <MessageCircle className="w-5 h-5" />
            <span>Ask AI Assistant</span>
          </button>
          
          <Link
            to="/upload"
            className="flex items-center justify-center space-x-2 bg-green-100 hover:bg-green-200 text-green-700 font-semibold py-3 px-6 rounded-lg transition-all transform hover:scale-105 border border-green-300"
          >
            <Camera className="w-5 h-5" />
            <span>Scan Another Crop</span>
          </Link>
        </motion.div>

        {/* Chat Assistant */}
        <ChatAssistant 
          detectionResult={result}
          isOpen={isChatOpen}
          onToggle={() => setIsChatOpen(!isChatOpen)}
        />
      </div>
    </div>
  );
};

export default ResultPage;
