import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useLocation, useNavigate, Link } from 'react-router-dom';
import { 
  ArrowLeft, 
  Share2, 
  Download, 
  Camera, 
  MessageCircle,
  Leaf,
  Beaker,
  Sparkles,
  TrendingUp,
  Calendar,
  BarChart3,
  History,
  FileText,
  Plus,
  Zap,
  Activity,
  Clock,
  Droplets,
  Thermometer,
  Sun,
  Shield,
  Eye,
  CheckCircle,
  AlertCircle
} from 'lucide-react';
import { useLanguage } from '../contexts/LanguageContext';
import { DetectionResult } from '../types';

const MonitoringPage: React.FC = () => {
  const { t } = useLanguage();
  const location = useLocation();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState<'organic' | 'chemical'>('organic');
  
  const result = location.state?.result as DetectionResult;

  // Mock scan history data
  const scanHistory = [
    { id: 1, crop: 'Tomato', date: '2024-01-15', status: 'Healthy' },
    { id: 2, crop: 'Potato', date: '2024-01-14', status: 'Early Blight' },
    { id: 3, crop: 'Wheat', date: '2024-01-13', status: 'Rust Disease' },
    { id: 4, crop: 'Rice', date: '2024-01-12', status: 'Healthy' },
  ];

  // Mock timeline data for treatment progress
  const treatmentTimeline = [
    { date: '2024-01-15', action: 'Disease Detected', status: 'current', severity: 89 },
    { date: '2024-01-18', action: 'Organic Treatment Applied', status: 'scheduled', severity: 75 },
    { date: '2024-01-22', action: 'Progress Check', status: 'scheduled', severity: 50 },
    { date: '2024-01-25', action: 'Expected Recovery', status: 'future', severity: 20 },
  ];

  const handleShare = () => {
    const shareText = `AgroIndia Monitoring Report:\n\nCrop: ${result?.crop}\nIssue: ${result?.disease}\nConfidence: ${result?.confidence}%\n\nMonitoring treatment progress...`;
    
    if (navigator.share) {
      navigator.share({
        title: 'AgroIndia Monitoring Report',
        text: shareText,
      });
    } else {
      const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(shareText)}`;
      window.open(whatsappUrl, '_blank');
    }
  };

  const handleDownload = () => {
    const reportContent = `
AgroIndia Monitoring Report
Generated: ${new Date().toLocaleDateString()}

Crop: ${result?.crop || 'Unknown'}
Detected Issue: ${result?.disease || 'Unknown'}
Confidence Level: ${result?.confidence || 0}%

Treatment Timeline:
${treatmentTimeline.map(item => `${item.date}: ${item.action} (Severity: ${item.severity}%)`).join('\n')}

---
Report generated by AgroIndia AI Monitoring System
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `agroindia-monitoring-report-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const organicSolutions = [
    "Apply neem oil spray (2-3 times per week)",
    "Use beneficial insects like ladybugs for natural pest control",
    "Prepare compost tea and apply to soil",
    "Implement crop rotation with nitrogen-fixing plants",
    "Use copper-based organic fungicides"
  ];

  const chemicalSolutions = [
    "Apply systemic fungicide (follow label instructions)",
    "Use targeted insecticide spray",
    "Apply balanced NPK fertilizer",
    "Use soil sterilization agents if needed",
    "Consider growth regulators for severe cases"
  ];

  const preventionTips = [
    "Maintain proper spacing between plants for air circulation",
    "Water at soil level to avoid wetting leaves",
    "Remove and destroy infected plant debris immediately",
    "Monitor crops regularly for early detection",
    "Use disease-resistant varieties when possible",
    "Ensure proper soil drainage and pH levels"
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 py-8 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
      {/* Floating Particles */}
      {[...Array(6)].map((_, i) => (
        <motion.div
          key={i}
          className="absolute opacity-20"
          initial={{
            x: Math.random() * window.innerWidth,
            y: window.innerHeight + 50,
            rotate: 0,
            scale: 0.5 + Math.random() * 0.5
          }}
          animate={{
            y: -100,
            rotate: 360,
            x: Math.random() * window.innerWidth
          }}
          transition={{
            duration: 8 + Math.random() * 4,
            repeat: Infinity,
            delay: i * 0.5,
            ease: "linear"
          }}
        >
          <Sparkles className="w-6 h-6 text-green-400" />
        </motion.div>
      ))}

      <div className="max-w-7xl mx-auto relative z-10">
        {/* Header */}
        <motion.div 
          className="flex items-center justify-between mb-8"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <button
            onClick={() => navigate('/result', { state: { result } })}
            className="flex items-center space-x-2 text-green-600 hover:text-green-700 font-medium"
          >
            <ArrowLeft className="w-5 h-5" />
            <span>Back to Results</span>
          </button>
          
          <h1 className="text-3xl md:text-4xl font-bold text-green-800">
            Crop Monitoring Dashboard
          </h1>
          
          <div className="w-20"></div>
        </motion.div>

        {/* Crop Monitoring Panel - Full Implementation */}
        <motion.div 
          className="bg-white rounded-2xl shadow-xl overflow-hidden mb-8"
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          {/* Panel Header */}
          <div className="bg-gradient-to-r from-emerald-600 to-green-600 text-white p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="bg-white/20 p-2 rounded-lg">
                  <Activity className="w-6 h-6" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold">Crop Monitoring Panel</h2>
                  <p className="text-emerald-100">Track treatment progress and health insights</p>
                </div>
              </div>
              <div className="flex items-center space-x-2 bg-white/20 px-3 py-1 rounded-lg">
                <TrendingUp className="w-4 h-4" />
                <span className="text-sm font-medium">Live Monitoring</span>
              </div>
            </div>
          </div>

          <div className="p-8">
            {/* Timeline View */}
            <div className="mb-8">
              <h3 className="text-xl font-semibold text-green-800 mb-4 flex items-center space-x-2">
                <Clock className="w-5 h-5" />
                <span>Treatment Timeline</span>
              </h3>
              
              <div className="relative">
                <div className="absolute left-4 top-0 bottom-0 w-0.5 bg-green-200"></div>
                <div className="space-y-4">
                  {treatmentTimeline.map((item, index) => (
                    <motion.div
                      key={index}
                      className={`relative flex items-center space-x-4 p-4 rounded-lg border-2 transition-all ${
                        item.status === 'current' 
                          ? 'border-green-400 bg-green-50' 
                          : item.status === 'scheduled'
                          ? 'border-blue-400 bg-blue-50'
                          : 'border-gray-300 bg-gray-50'
                      }`}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                    >
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        item.status === 'current' 
                          ? 'bg-green-500' 
                          : item.status === 'scheduled'
                          ? 'bg-blue-500'
                          : 'bg-gray-400'
                      }`}>
                        {item.status === 'current' ? (
                          <CheckCircle className="w-4 h-4 text-white" />
                        ) : item.status === 'scheduled' ? (
                          <Calendar className="w-4 h-4 text-white" />
                        ) : (
                          <Clock className="w-4 h-4 text-white" />
                        )}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between">
                          <span className="font-semibold text-gray-800">{item.action}</span>
                          <span className="text-sm text-gray-600">{item.date}</span>
                        </div>
                        <div className="mt-1 flex items-center space-x-2">
                          <span className="text-sm text-gray-600">Disease Severity:</span>
                          <div className="flex items-center space-x-1">
                            <div className="w-20 h-2 bg-gray-200 rounded-full">
                              <div 
                                className={`h-2 rounded-full ${
                                  item.severity > 70 ? 'bg-red-500' : item.severity > 40 ? 'bg-yellow-500' : 'bg-green-500'
                                }`}
                                style={{ width: `${item.severity}%` }}
                              ></div>
                            </div>
                            <span className="text-sm font-medium">{item.severity}%</span>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </div>

            {/* Disease Severity Graph */}
            <div className="mb-8">
              <h3 className="text-xl font-semibold text-green-800 mb-4 flex items-center space-x-2">
                <BarChart3 className="w-5 h-5" />
                <span>Disease Severity Tracking</span>
              </h3>
              
              <div className="bg-gray-50 rounded-xl p-6 border-2 border-gray-200">
                <div className="flex items-center justify-between mb-4">
                  <span className="text-sm font-medium text-gray-600">Severity Level Over Time</span>
                  <div className="flex items-center space-x-4 text-sm">
                    <div className="flex items-center space-x-1">
                      <div className="w-3 h-3 bg-red-500 rounded"></div>
                      <span>High</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <div className="w-3 h-3 bg-yellow-500 rounded"></div>
                      <span>Medium</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <div className="w-3 h-3 bg-green-500 rounded"></div>
                      <span>Low</span>
                    </div>
                  </div>
                </div>
                
                {/* Placeholder for chart */}
                <div className="h-40 bg-white rounded-lg border border-gray-200 flex items-center justify-center">
                  <div className="text-center text-gray-500">
                    <BarChart3 className="w-12 h-12 mx-auto mb-2 text-gray-400" />
                    <p className="text-sm">Interactive severity chart would appear here</p>
                    <p className="text-xs">Showing improvement from 89% to projected 20%</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Side-by-side Widgets */}
            <div className="grid md:grid-cols-2 gap-6 mb-8">
              {/* Scan History Widget */}
              <motion.div 
                className="bg-purple-50 rounded-xl p-6 border-2 border-purple-200 hover:shadow-lg transition-shadow"
                whileHover={{ scale: 1.02 }}
              >
                <h4 className="text-lg font-semibold text-purple-800 mb-4 flex items-center space-x-2">
                  <History className="w-5 h-5" />
                  <span>Scan History</span>
                </h4>
                
                <div className="space-y-3">
                  {scanHistory.slice(0, 4).map((scan) => (
                    <div key={scan.id} className="flex items-center justify-between p-3 bg-white rounded-lg shadow-sm">
                      <div>
                        <span className="font-medium text-gray-800">{scan.crop}</span>
                        <p className="text-sm text-gray-600">{scan.date}</p>
                      </div>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        scan.status === 'Healthy' 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {scan.status}
                      </span>
                    </div>
                  ))}
                  <button className="w-full text-purple-600 hover:text-purple-700 text-sm font-medium py-2">
                    View All History →
                  </button>
                </div>
              </motion.div>

              {/* Recommended Next Step Widget */}
              <motion.div 
                className="bg-blue-50 rounded-xl p-6 border-2 border-blue-200 hover:shadow-lg transition-shadow"
                whileHover={{ scale: 1.02 }}
              >
                <h4 className="text-lg font-semibold text-blue-800 mb-4 flex items-center space-x-2">
                  <Zap className="w-5 h-5" />
                  <span>Recommended Next Step</span>
                </h4>
                
                <div className="space-y-4">
                  <div className="bg-white rounded-lg p-4 shadow-sm">
                    <div className="flex items-start space-x-3">
                      <div className="bg-blue-100 p-2 rounded-lg">
                        <Droplets className="w-5 h-5 text-blue-600" />
                      </div>
                      <div className="flex-1">
                        <h5 className="font-semibold text-gray-800">Apply Organic Treatment</h5>
                        <p className="text-sm text-gray-600 mt-1">Based on severe stage detection, immediate organic fungicide application recommended</p>
                        <div className="mt-2 flex items-center space-x-2 text-xs text-blue-600">
                          <Calendar className="w-3 h-3" />
                          <span>Schedule for today</span>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-white rounded-lg p-4 shadow-sm">
                    <div className="flex items-start space-x-3">
                      <div className="bg-green-100 p-2 rounded-lg">
                        <Eye className="w-5 h-5 text-green-600" />
                      </div>
                      <div className="flex-1">
                        <h5 className="font-semibold text-gray-800">Monitor Progress</h5>
                        <p className="text-sm text-gray-600 mt-1">Schedule follow-up scan in 3-4 days to track treatment effectiveness</p>
                        <div className="mt-2 flex items-center space-x-2 text-xs text-green-600">
                          <Calendar className="w-3 h-3" />
                          <span>Due in 3 days</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            </div>

            {/* Environmental Conditions */}
            <div className="mb-8">
              <h3 className="text-xl font-semibold text-green-800 mb-4 flex items-center space-x-2">
                <Sun className="w-5 h-5" />
                <span>Current Environmental Conditions</span>
              </h3>
              
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {[
                  { label: 'Temperature', value: '28°C', icon: Thermometer, color: 'orange' },
                  { label: 'Humidity', value: '65%', icon: Droplets, color: 'blue' },
                  { label: 'Sunlight', value: 'Optimal', icon: Sun, color: 'yellow' },
                  { label: 'Risk Level', value: 'Medium', icon: Shield, color: 'red' }
                ].map((condition, index) => (
                  <motion.div
                    key={index}
                    className="bg-white rounded-lg p-4 border-2 border-gray-200 text-center hover:shadow-md transition-shadow"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <condition.icon className={`w-6 h-6 mx-auto mb-2 text-${condition.color}-500`} />
                    <p className="text-sm font-medium text-gray-600">{condition.label}</p>
                    <p className="text-lg font-bold text-gray-800">{condition.value}</p>
                  </motion.div>
                ))}
              </div>
            </div>

            {/* Action Buttons */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <motion.button
                className="flex items-center justify-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-all"
                whileHover={{ scale: 1.05, y: -2 }}
                whileTap={{ scale: 0.95 }}
              >
                <TrendingUp className="w-5 h-5" />
                <span>Go to Insights</span>
              </motion.button>

              <motion.button
                onClick={() => navigate('/upload')}
                className="flex items-center justify-center space-x-2 bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-all"
                whileHover={{ scale: 1.05, y: -2 }}
                whileTap={{ scale: 0.95 }}
              >
                <Plus className="w-5 h-5" />
                <span>Scan New Crop</span>
              </motion.button>

              <motion.button
                onClick={handleDownload}
                className="flex items-center justify-center space-x-2 bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 px-6 rounded-lg transition-all"
                whileHover={{ scale: 1.05, y: -2 }}
                whileTap={{ scale: 0.95 }}
              >
                <FileText className="w-5 h-5" />
                <span>Download Report</span>
              </motion.button>
            </div>
          </div>
        </motion.div>

        {/* Tabbed Solutions Section */}
        <motion.div 
          className="bg-white rounded-2xl shadow-xl p-6 mb-8"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
        >
          <h2 className="text-2xl font-bold text-green-800 mb-6">Treatment Solutions</h2>
          
          {/* Tab Navigation */}
          <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg mb-6">
            <button
              onClick={() => setActiveTab('organic')}
              className={`flex-1 flex items-center justify-center space-x-2 py-3 px-4 rounded-md font-semibold transition-all ${
                activeTab === 'organic'
                  ? 'bg-green-600 text-white shadow-md'
                  : 'text-green-600 hover:bg-green-50'
              }`}
            >
              <Leaf className="w-5 h-5" />
              <span>Organic Solutions</span>
            </button>
            <button
              onClick={() => setActiveTab('chemical')}
              className={`flex-1 flex items-center justify-center space-x-2 py-3 px-4 rounded-md font-semibold transition-all ${
                activeTab === 'chemical'
                  ? 'bg-blue-600 text-white shadow-md'
                  : 'text-blue-600 hover:bg-blue-50'
              }`}
            >
              <Beaker className="w-5 h-5" />
              <span>Chemical Solutions</span>
            </button>
          </div>

          {/* Tab Content */}
          <div className="min-h-[200px]">
            {activeTab === 'organic' ? (
              <div className="space-y-4">
                <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                  <h4 className="font-semibold text-green-800 mb-2">Recommended Organic Treatments:</h4>
                  <ul className="space-y-2">
                    {organicSolutions.map((solution, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <span className="bg-green-200 text-green-800 text-sm font-bold px-2 py-1 rounded-full mt-0.5 min-w-[24px] text-center">
                          {index + 1}
                        </span>
                        <span className="text-green-700">{solution}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                  <h4 className="font-semibold text-blue-800 mb-2">Chemical Treatment Options:</h4>
                  <ul className="space-y-2">
                    {chemicalSolutions.map((solution, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <span className="bg-blue-200 text-blue-800 text-sm font-bold px-2 py-1 rounded-full mt-0.5 min-w-[24px] text-center">
                          {index + 1}
                        </span>
                        <span className="text-blue-700">{solution}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                <div className="bg-yellow-50 p-3 rounded-lg border border-yellow-200">
                  <p className="text-yellow-800 text-sm">⚠️ Always follow manufacturer instructions and safety guidelines when using chemical treatments.</p>
                </div>
              </div>
            )}
          </div>
        </motion.div>

        {/* Future Prevention Tips */}
        <motion.div 
          className="bg-white rounded-2xl shadow-xl p-6 mb-8"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.6 }}
        >
          <div className="flex items-center space-x-3 mb-6">
            <div className="bg-purple-100 p-3 rounded-full">
              <Sparkles className="w-6 h-6 text-purple-600" />
            </div>
            <h2 className="text-2xl font-bold text-green-800">Prevention Tips</h2>
          </div>
          
          <div className="grid md:grid-cols-2 gap-4">
            {preventionTips.map((tip, index) => (
              <div key={index} className="flex items-start space-x-3 p-3 bg-purple-50 rounded-lg border border-purple-200">
                <span className="bg-purple-200 text-purple-800 text-sm font-bold px-2 py-1 rounded-full min-w-[24px] text-center">
                  {index + 1}
                </span>
                <span className="text-purple-700">{tip}</span>
              </div>
            ))}
          </div>
        </motion.div>

        {/* Action Buttons */}
        <motion.div 
          className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.8 }}
        >
          <motion.button
            onClick={handleShare}
            className="flex items-center justify-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-all"
            whileHover={{
              scale: 1.05,
              boxShadow: "0 10px 25px rgba(59, 130, 246, 0.3)",
              y: -2
            }}
            whileTap={{ scale: 0.95 }}
          >
            <Share2 className="w-5 h-5" />
            <span>Share Results</span>
          </motion.button>

          <motion.button
            onClick={handleDownload}
            className="flex items-center justify-center space-x-2 bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-all"
            whileHover={{
              scale: 1.05,
              boxShadow: "0 10px 25px rgba(34, 197, 94, 0.3)",
              y: -2
            }}
            whileTap={{ scale: 0.95 }}
          >
            <Download className="w-5 h-5" />
            <span>Download Report</span>
          </motion.button>

          <motion.button
            onClick={() => setIsChatOpen(true)}
            className="flex items-center justify-center space-x-2 bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 px-6 rounded-lg transition-all"
            whileHover={{
              scale: 1.05,
              boxShadow: "0 10px 25px rgba(147, 51, 234, 0.3)",
              y: -2
            }}
            whileTap={{ scale: 0.95 }}
          >
            <MessageCircle className="w-5 h-5" />
            <span>Ask AI Assistant</span>
          </motion.button>

          <motion.div>
            <Link
              to="/upload"
              className="flex items-center justify-center space-x-2 bg-green-100 hover:bg-green-200 text-green-700 font-semibold py-3 px-6 rounded-lg transition-all border border-green-300 group"
            >
              <Camera className="w-5 h-5 group-hover:rotate-12 transition-transform" />
              <span>Scan Another Crop</span>
            </Link>
          </motion.div>
        </motion.div>

      </div>
    </div>
  );
};

export default MonitoringPage;
